// <auto-generated />
using System;
using Intersect.Server.Prototype;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intersect.Server.Migrations.Prototype
{
    [DbContext(typeof(PrototypeContext))]
    partial class PrototypeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("Intersect.Server.Prototype.ContentString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.ToTable("ContentStrings");
                });

            modelBuilder.Entity("Intersect.Server.Prototype.LocalizedContentString", b =>
                {
                    b.Property<Guid>("ContentStringId");

                    b.Property<int>("LocaleId");

                    b.Property<string>("Plural");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<string>("Zero");

                    b.HasKey("ContentStringId", "LocaleId");

                    b.ToTable("LocalizedContentString");
                });

            modelBuilder.Entity("Intersect.Server.Prototype.PrototypeJunctionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JunctionMetaProperty");

                    b.Property<Guid>("SetId");

                    b.Property<Guid>("SimpleId");

                    b.HasKey("Id");

                    b.HasIndex("SimpleId");

                    b.HasIndex("SetId", "SimpleId")
                        .IsUnique();

                    b.ToTable("Junctions");
                });

            modelBuilder.Entity("Intersect.Server.Prototype.PrototypeSetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Intersect.Server.Prototype.PrototypeSimpleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DescriptionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.ToTable("Simples");
                });

            modelBuilder.Entity("Intersect.Server.Prototype.LocalizedContentString", b =>
                {
                    b.HasOne("Intersect.Server.Prototype.ContentString", "ContentString")
                        .WithMany("AvailableLocalizations")
                        .HasForeignKey("ContentStringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intersect.Server.Prototype.PrototypeJunctionEntity", b =>
                {
                    b.HasOne("Intersect.Server.Prototype.PrototypeSetEntity", "Set")
                        .WithMany("Junctions")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Intersect.Server.Prototype.PrototypeSimpleEntity", "Simple")
                        .WithMany("Junctions")
                        .HasForeignKey("SimpleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intersect.Server.Prototype.PrototypeSimpleEntity", b =>
                {
                    b.HasOne("Intersect.Server.Prototype.ContentString", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");
                });
#pragma warning restore 612, 618
        }
    }
}
