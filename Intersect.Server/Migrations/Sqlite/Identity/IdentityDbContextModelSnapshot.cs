// <auto-generated />
using System;
using Intersect.Server.Identity.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intersect.Server.Migrations.Sqlite.Identity
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("ApiResourceScope", b =>
                {
                    b.Property<string>("ApiResourcesName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScopesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ApiResourcesName", "ScopesName");

                    b.HasIndex("ScopesName");

                    b.ToTable("ApiResourceScope");
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.Property<string>("ClientsClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScopesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientsClientId", "ScopesName");

                    b.HasIndex("ScopesName");

                    b.ToTable("ClientScope");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ApiResource", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthenticationMethodReferences")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Acrs");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandlerFullQualifiedName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionsFullQualifiedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializedOptions")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationSchemeProviders");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "resources");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "scope");

                    b.HasKey("Id");

                    b.HasIndex("GrantId");

                    b.ToTable("AuthorizedScope");

                    b.HasAnnotation("Relational:JsonPropertyName", "scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextFetchTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationEdp")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RejectionSentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BCAuthorizeLst");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorizeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BCAuthorizeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BCAuthorizeId");

                    b.ToTable("BCAuthorizeHistory");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClaimProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClaimType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClaimProviders");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<string>("ApplicationType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "application_type");

                    b.Property<int>("AuthReqIdExpirationTimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BCAuthenticationRequestSigningAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_authentication_request_signing_alg");

                    b.Property<string>("BCClientNotificationEndpoint")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_client_notification_endpoint");

                    b.Property<int>("BCIntervalSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BCTokenDeliveryMode")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_token_delivery_mode");

                    b.Property<bool>("BCUserCodeParameter")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_user_code_parameter");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_logout_uri");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret");

                    b.Property<DateTime?>("ClientSecretExpirationTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret_expires_at");

                    b.Property<string>("ClientType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "contacts");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("DefaultAcrValues")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "default_acr_values");

                    b.Property<double?>("DefaultMaxAge")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "default_max_age");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "frontchannel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "frontchannel_logout_uri");

                    b.Property<string>("GrantTypes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "grant_types");

                    b.Property<string>("IdTokenEncryptedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_encrypted_response_alg");

                    b.Property<string>("IdTokenEncryptedResponseEnc")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_encrypted_response_enc");

                    b.Property<string>("IdTokenSignedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_signed_response_alg");

                    b.Property<string>("InitiateLoginUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "initiate_login_uri");

                    b.Property<bool>("IsConsentDisabled")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_consent_disabled");

                    b.Property<bool>("IsResourceParameterRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JwksUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "jwks_uri");

                    b.Property<string>("PairWiseIdentifierSalt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostLogoutRedirectUris")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "post_logout_redirect_uris");

                    b.Property<string>("PreferredTokenProfile")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "preferred_token_profile");

                    b.Property<string>("RedirectionUrls")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_uris");

                    b.Property<double?>("RefreshTokenExpirationTimeInSeconds")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "refresh_token_expiration_time_seconds");

                    b.Property<string>("RegistrationAccessToken")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "registration_access_token");

                    b.Property<string>("RequestObjectEncryptionAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_encryption_alg");

                    b.Property<string>("RequestObjectEncryptionEnc")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_encryption_enc");

                    b.Property<string>("RequestObjectSigningAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_signing_alg");

                    b.Property<bool>("RequireAuthTime")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "require_auth_time");

                    b.Property<string>("ResponseTypes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "response_types");

                    b.Property<string>("SectorIdentifierUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sector_identifier_uri");

                    b.Property<string>("SerializedParameters")
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftwareId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "software_id");

                    b.Property<string>("SoftwareVersion")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "software_version");

                    b.Property<string>("SubjectType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "subject_type");

                    b.Property<string>("TlsClientAuthSanDNS")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_dns");

                    b.Property<string>("TlsClientAuthSanEmail")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_email");

                    b.Property<string>("TlsClientAuthSanIP")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_ip");

                    b.Property<string>("TlsClientAuthSanURI")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_uri");

                    b.Property<string>("TlsClientAuthSubjectDN")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_subject_dn");

                    b.Property<bool>("TlsClientCertificateBoundAccessToken")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_certificate_bound_access_token");

                    b.Property<string>("TokenEncryptedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "token_encrypted_response_alg");

                    b.Property<string>("TokenEncryptedResponseEnc")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "token_encrypted_response_enc");

                    b.Property<string>("TokenEndPointAuthMethod")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "token_endpoint_auth_method");

                    b.Property<double?>("TokenExpirationTimeInSeconds")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "token_expiration_time_seconds");

                    b.Property<string>("TokenSignedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "token_signed_response_alg");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.Property<string>("UserInfoEncryptedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_encrypted_response_alg");

                    b.Property<string>("UserInfoEncryptedResponseEnc")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_encrypted_response_enc");

                    b.Property<string>("UserInfoSignedResponseAlg")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_signed_response_alg");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientJsonWebKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("KeyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializedJsonWebKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientJsonWebKey");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Consent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScopeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScopeName");

                    b.HasIndex("UserId");

                    b.ToTable("Consent");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Grant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "claims");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Grants");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Scope", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExposedInConfigurationEdp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Protocol")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ScopeClaimMapper", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMultiValued")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapperType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SAMLAttributeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TokenClaimJsonType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenClaimName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeCountryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeFormattedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeLocalityName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributePostalCodeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeRegionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAttributeStreetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPropertyName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScopeName");

                    b.ToTable("ScopeClaimMapper");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Token", b =>
                {
                    b.Property<int>("PkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("GrantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRegistrationAccessToken")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalData")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PkID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPendingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requester")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("UmaPendingRequest");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UMAPermissionTicket");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicketRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UMAPermissionTicketId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UMAPermissionTicketId");

                    b.ToTable("UMAPermissionTicketRecord");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("IconUri")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "icon_uri");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_scopes");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UmaResources");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("UMAResourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UMAResourceId");

                    b.ToTable("UMAResourcePermission");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermissionClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "claim_type");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "friendly_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("UMAResourcePermissionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("UMAResourcePermissionId");

                    b.ToTable("UMAResourcePermissionClaim");

                    b.HasAnnotation("Relational:JsonPropertyName", "claims");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceRegistrationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserCredential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OTPAlg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OTPCounter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredential");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializedOptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevice");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserExternalAuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExternalAuthProvider");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AuthenticationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("TranslationUMAResource", b =>
                {
                    b.Property<int>("TranslationsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UMAResourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("TranslationsId", "UMAResourceId");

                    b.HasIndex("UMAResourceId");

                    b.ToTable("TranslationUMAResource");
                });

            modelBuilder.Entity("ApiResourceScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ApiResource", null)
                        .WithMany()
                        .HasForeignKey("ApiResourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Grant", null)
                        .WithMany("Scopes")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorizeHistory", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.BCAuthorize", null)
                        .WithMany("Histories")
                        .HasForeignKey("BCAuthorizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientJsonWebKey", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany("SerializedJsonWebKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Consent", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany("Consents")
                        .HasForeignKey("ScopeName");

                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Consents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ScopeClaimMapper", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", "Scope")
                        .WithMany("ClaimMappers")
                        .HasForeignKey("ScopeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Translation", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany("Translations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPendingRequest", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicketRecord", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", null)
                        .WithMany("Records")
                        .HasForeignKey("UMAPermissionTicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UMAResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermissionClaim", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResourcePermission", null)
                        .WithMany("Claims")
                        .HasForeignKey("UMAResourcePermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserClaim", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("OAuthUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserCredential", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserDevice", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserExternalAuthProvider", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("ExternalAuthProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserSession", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationUMAResource", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Translation", null)
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", null)
                        .WithMany()
                        .HasForeignKey("UMAResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorize", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Client", b =>
                {
                    b.Navigation("SerializedJsonWebKeys");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Grant", b =>
                {
                    b.Navigation("Scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Scope", b =>
                {
                    b.Navigation("ClaimMappers");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.User", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("Credentials");

                    b.Navigation("Devices");

                    b.Navigation("ExternalAuthProviders");

                    b.Navigation("OAuthUserClaims");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
